package com.example.code_agent

import kotlinx.coroutines.runBlocking
import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.SimpleFileVisitor
import java.nio.file.attribute.BasicFileAttributes
import java.util.Properties

fun main(vararg args: String) = runBlocking {
    // ---- 1) –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥ ----
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º:
    //   --file <name_or_relpath>
    //   --ask  "<user prompt>"
    // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ ‚Äî —Å–ø—Ä–æ—Å–∏–º –≤ –∫–æ–Ω—Å–æ–ª–∏.
    val argMap = args.toList().chunked(2).filter { it.size == 2 }.associate { it[0] to it[1] }
    val fileQuery = argMap["--file"] ?: readLinePrompt("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, MainActivity.kt): ")
    val userAsk  = argMap["--ask"]  ?: readLinePrompt("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å (user prompt): ")

    // ---- 2) –ö–ª—é—á OpenRouter ----
    val apiKey = System.getenv("OPEN_ROUTER_API_KEY") ?: run {
        val f = java.io.File("local.properties")
        if (f.exists()) Properties().apply { load(f.inputStream()) }.getProperty("OPEN_ROUTER_API_KEY") else null
    } ?: error("Set OPEN_ROUTER_API_KEY env var or put it into local.properties")

    val api = createOpenRouterApi(apiKey)

    // ---- 3) –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–∏ ----
    val targetPath = resolveProjectFile(fileQuery)
        ?: error("–ù–µ –Ω–∞—à—ë–ª —Ñ–∞–π–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É '$fileQuery'. –ü—Ä–æ–≤–µ—Ä—å –∏–º—è –∏–ª–∏ –ø—É—Ç—å.")

    println("üîé –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: $targetPath")

    // ---- 4) –ì–æ–Ω–∏–º –≤ LLM —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –ø—Ä–æ–º–ø—Ç–æ–º ----
    try {
        val updated = LlmCodeFixer.fixFileWithLlm(
            api = api,
            model = "deepseek/deepseek-r1:free",
            filePath = targetPath.toString(),
            taskNote = userAsk
        )
        println("‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω: $targetPath")
        println("----\n$updated")
        TokenTally.printlnSummary()
    } catch (t: Throwable) {
        System.err.println("‚ùå –û—à–∏–±–∫–∞: ${t.message}")
        t.printStackTrace()
    }
}

private fun readLinePrompt(prompt: String): String {
    print(prompt)
    return readln().trim()
}

private fun resolveProjectFile(query: String): Path? {
    val q = query.trim()
    val qPathLike = q.contains('/') || q.contains('\\')
    val root = Paths.get(".").toAbsolutePath().normalize()

    // 1) –ï—Å–ª–∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –ø—É—Ç—å –∏ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º.
    if (qPathLike) {
        val p = root.resolve(q).normalize()
        if (Files.exists(p) && Files.isRegularFile(p)) return p
    }

    // 2) –ò–Ω–∞—á–µ –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    val candidates = mutableListOf<Path>()
    Files.walkFileTree(root, object : SimpleFileVisitor<Path>() {
        override fun visitFile(file: Path, attrs: BasicFileAttributes): FileVisitResult {
            if (file.fileName.toString().equals(q, ignoreCase = true)) {
                candidates.add(file.normalize())
            }
            return FileVisitResult.CONTINUE
        }
    })

    if (candidates.isEmpty()) return null
    if (candidates.size == 1) return candidates.first()

    // 3) –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –ø–æ "–æ—á–∫–∞–º"
    val scored = candidates.map { it to pathScore(it, root) }.sortedByDescending { it.second }
    val best = scored.first().first

    // –ü–µ—á–∞—Ç–∞–µ–º —Ç–æ–ø-5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    println("–ù–∞—à—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≤—ã–±–∏—Ä–∞—é –ª—É—á—à–µ–µ. –¢–æ–ø-5:")
    scored.take(5).forEachIndexed { i, (p, s) ->
        println("  ${i + 1}. $p  (score=$s)")
    }

    return best
}

private fun pathScore(p: Path, root: Path): Int {
    val rel = try { root.relativize(p) } catch (_: Exception) { p }
    val s = rel.toString().replace('\\', '/')
    var score = 0
    if (s.contains("app/src/main/java")) score += 100
    if (s.contains("app/src/main/kotlin")) score += 100
    if (s.contains("src/main/java")) score += 50
    if (s.contains("src/main/kotlin")) score += 50
    if (s.endsWith(".kt")) score += 10
    // –∫–æ—Ä–æ—á–µ –ø—É—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ
    score += 20 - s.count { it == '/' }.coerceAtLeast(0)
    return score
}
